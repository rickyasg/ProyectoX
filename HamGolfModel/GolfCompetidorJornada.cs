//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HamDataModel
{
    using HamDataTransactions;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;

    public partial class GolfCompetidorJornada
    {       
        #region Propiedades
        public int CompetidorJornadaId { get; set; }
        public Nullable<int> CompetidorId { get; set; }
        public Nullable<int> JornadaId { get; set; }
        public Nullable<System.DateTime> FechaRegistro { get; set; }
        public Nullable<int> UsuarioId { get; set; }
        public Nullable<int> Estado { get; set; }
        public Nullable<int> GrupoId { get; set; }
        public Nullable<int> Posicion { get; set; }
        public Nullable<int> TotalNeto { get; set; }

        const string Entity = "GolfCompetidorJornadas";
        #endregion

        #region Metodos DML
        public bool Insert()
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps = SetParameters(ps);
            db.ExecStoreProcedure("[golf].[pInsCompetidorJornada]", ps);
            return (db.RowAffected > 0);
        }

        public bool Update()
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps = SetParameters(ps);
            ps.Add(new SqlParameter("Estado", Estado));
            db.ExecStoreProcedure("pgolfUpCompetidorJornada", ps);
            return (db.RowAffected > 0);
        }

        public bool UpdateEstado()
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps = SetParametersEstado(ps);
            db.ExecStoreProcedure("[golf].[pUpdEstadoTarjeta]", ps);
            return (db.RowAffected > 0);
        }

        public static bool CambiarEstado(int competidorJornadaId)
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps.Add(new SqlParameter("CompetidorJornadaId", competidorJornadaId));
            db.ExecStoreProcedure("[golf].[pEstadoCompetidorJornada]", ps);
            return (db.RowAffected > 0);
        }

        public static bool Delete(int grupoId)
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps.Add(new SqlParameter("GrupoId", grupoId));
            db.ExecStoreProcedure("[golf].[pDeleteCompetidorJornada]", ps);
            return (db.RowAffected > 0);
        }
        #endregion

        #region Metodos Get
        public static DataTable GetCompetidoresSinJornada(int categoriaId, int jornadaId, int eventoId)
        {
            DBTransaction db = new DBTransaction();
            string contition = string.Empty;
            string categoria = categoriaId == 0 ? "" : string.Format(" CategoriaId = {0} and EventoDeportivoId = {1} ", categoriaId, eventoId);
            string Jornada = string.Format(" JornadaId < {0}", jornadaId);
            if (string.IsNullOrEmpty(categoria))
            {
                contition = string.Format("WHERE {0} and EventoDeportivoId = {1}", Jornada, eventoId);
            }
            else
            {
                contition = string.Format("WHERE {0} and {1}", categoria, Jornada);
            }
            //string sql = string.Format("SELECT (Paterno + ' ' + Materno + ' ' + Nombre) as Nombre, CompetidorId FROM vgolfCompetidorSinJornada {0}", contition);
            string sql = string.Format("[golf].[vCompetidorSinJornada] {0}", contition);
            DataView dt = db.GetDataView(sql).DefaultView;
            dt.Sort = "Paterno, Materno, Nombres";            
            return dt.ToTable();
        }

        public static DataTable GetCompetidoresConJornada(int grupoId)
        {
            DBTransaction db = new DBTransaction();
            //string sql = string.Format("SELECT (Paterno + ' ' + Materno + ' ' + Nombre) as Nombre, CompetidorId, JornadaId, GrupoId FROM vgolfCompetidorConJornada WHERE GrupoId = {0}", grupoId);
            string sql = string.Format("[golf].[vCompetidorConJornada] WHERE GrupoId = {0}", grupoId);
            DataTable dt = db.GetDataView(sql);
            return dt;
        }

        public static DataTable GetCompetidoresGrupos(int jornadaId, int categoriaId)
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps.Add(new SqlParameter("JornadaId", jornadaId));
            ps.Add(new SqlParameter("CategoriaId", categoriaId));
            return db.GetStoreProcedure("[golf].[pListadoGruposPersonas]", ps);
        }
        #endregion

        #region Private Members
        private List<SqlParameter> SetParameters(List<SqlParameter> ps)
        {
            ps.Add(new SqlParameter("CompetidorId", CompetidorId));
            ps.Add(new SqlParameter("JornadaId", JornadaId));
            ps.Add(new SqlParameter("UsuarioId", UsuarioId));
            ps.Add(new SqlParameter("GrupoId", GrupoId));
            ps.Add(new SqlParameter("Posicion", Posicion));
            return ps;
        }

        private List<SqlParameter> SetParametersEstado(List<SqlParameter> ps)
        {
            ps.Add(new SqlParameter("GrupoId", GrupoId));
            ps.Add(new SqlParameter("Estado", Estado));
            
            return ps;
        }

        #endregion
    }
}
