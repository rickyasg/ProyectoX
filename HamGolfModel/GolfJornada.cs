//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HamDataModel
{
    using HamDataTransactions;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;

    public partial class GolfJornada
    {
        #region Propiedades
        public int JornadaId { get; set; }
        public Nullable<System.DateTime> Fecha { get; set; }
        public Nullable<int> EventoDeportivoId { get; set; }
        public string Descripcion { get; set; }
        public string NombreCorto { get; set; }
        public Nullable<System.DateTime> FechaRegistro { get; set; }
        public Nullable<int> UsuarioId { get; set; }

        const string Entity = "[golf].[Jornadas]";
        #endregion

        #region Metodos DML
        public bool Save()
        {
            bool result = false;
            result = (JornadaId > 0) ? Update() : Insert();
            return result;
        }

        //Cambiar los nombre de los Procedimientos almacenados
        public bool Insert()
        {
            return ExecuteTransaction("[golf].[pInsJornada]");
        }

        public bool Update()
        {
            return ExecuteTransaction("[golf].[pUpJornada]");
        }

        public bool Delete(int jornadaId)
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps.Add(new SqlParameter("JornadaId", jornadaId));
            db.ExecStoreProcedure("[golf].[pDeleteJornada]", ps);
            return (db.RowAffected > 0);
        }
        #endregion

        #region Metodos GET
        public static GolfJornada GetGolfJornada(int jornadaId)
        {
            return Parse(jornadaId);
        }

        public static List<DateTime> GetGolfJornadasFechas(int eventoDeportivoId)
        {
            List<DateTime> lsf = new List<DateTime>();
            DBTransaction db = new DBTransaction();
            DataTable dt = db.GetDataView(string.Format("[golf].[Jornadas] WHERE EventoDeportivoId = {0}", eventoDeportivoId));
            string fechas = string.Empty;
            foreach (DataRow dr in dt.Rows)
            {
                lsf.Add(Convert.ToDateTime(dr["Fecha"]));
            }
            return lsf;
        }

        public static string GetFechasJornadas(int eventoId)
        {
            DBTransaction db = new DBTransaction();

            DataTable dt = db.GetDataView(string.Format("[fFechasJornada] ({0})", eventoId));
            string fechas = string.Empty;
            foreach (DataRow dr in dt.Rows)
            {
                if (string.IsNullOrEmpty(fechas))
                {
                    fechas = string.Format(DBGlobalization.GetCultureInfo(), "{0:dd}", dr[0]);
                }
                else
                {
                    fechas = string.Format(DBGlobalization.GetCultureInfo(), "{0},{1:dd}", fechas, dr[0]);
                }
            }
            if (dt.Rows.Count > 0)
            {
                fechas = string.Format("{0} de {1:MMMM}", fechas, dt.Rows[0][0]);
            }
            return fechas;
        }

        public static List<GolfJornada> GetGolfJornadas(int eventoDeportivoId)
        {
            List<GolfJornada> lsJo = new List<GolfJornada>();
            DBTransaction db = new DBTransaction();
            DataTable dt = db.GetDataView(string.Format(" golf.Jornadas WHERE EventoDeportivoId = {0}", eventoDeportivoId));
            foreach (DataRow dr in dt.Rows)
            {
                GolfJornada gjo = ConvertToJornada(dr);
                lsJo.Add(gjo);
            }
            return lsJo;
        }
        public static DataTable getEquiposJornada(int EventoId, int PruebaEventoId, int JornadaId)
        {
            DBTransaction db = new DBTransaction();
            DataTable dt = db.GetDataView(string.Format(" golf.fGetEquiposJornada ({0},{1},{2})", EventoId, PruebaEventoId, JornadaId));
            return dt;
        }

        public static DataTable getEquiposResultados(int eventoId, int PruebaEventoId, int par)
        {
            int cont = 3;
            DataTable data = new DataTable();
            var jorandas = GetNroJornadas(eventoId);
            for (int i = 0; i < jorandas.Rows.Count; i++)
            {
                var jornada = Convert.ToInt32(jorandas.Rows[i][0]);
                if (i == 0)
                {
                    data = getEquiposJornada(eventoId, PruebaEventoId, jornada);
                    DataColumn n = new DataColumn();

                    n.ColumnName = cont.ToString();
                    n.DataType = typeof(Int32);
                    data.Columns.Add(n);

                    n = new DataColumn();
                    cont++;
                    n.ColumnName = cont.ToString();
                    n.DataType = typeof(Int32);
                    data.Columns.Add(n);

                }
                else
                {
                    var aux = getEquiposJornada(eventoId, PruebaEventoId, jornada);
                    var col1 = aux.Columns[aux.Columns.Count - 1];
                    DataColumn n = new DataColumn();
                    cont++;
                    n.ColumnName = cont.ToString();
                    n.DataType = typeof(Int32);
                    data.Columns.Add(n);
                    n = new DataColumn();
                    cont++;
                    n.ColumnName = cont.ToString();
                    n.DataType = typeof(Int32);
                    data.Columns.Add(n);
                    n = new DataColumn();
                    cont++;
                    n.ColumnName = cont.ToString();
                    n.DataType = typeof(Int32);
                    data.Columns.Add(n);
                    n = new DataColumn();
                    cont++;
                    n.ColumnName = cont.ToString();
                    n.DataType = typeof(Int32);
                    data.Columns.Add(n);

                    int auxCont = 0;

                    foreach (DataRow dato in aux.Rows)
                    {
                        var punto = dato["1"];
                        var puntoB = dato["2"];


                        data.Rows[auxCont][data.Columns.Count - 4] = Convert.ToInt32(punto is DBNull ? 0 : punto);
                        data.Rows[auxCont][data.Columns.Count - 3] = Convert.ToInt32(puntoB is DBNull ? 0 : puntoB);
                        auxCont++;
                    }
                }

            }
            DataColumn t = new DataColumn();

            t.ColumnName = "total";
            t.DataType = typeof(Int32);
            data.Columns.Add(t);

            for (int i = 0; i < data.Rows.Count; i++)
            {
                var valor1 = Convert.ToInt32(data.Rows[i]["2"] is DBNull ? 0 : data.Rows[i]["2"]);
                var valor2 = Convert.ToInt32(data.Rows[i]["1"] is DBNull ? 0 : data.Rows[i]["1"]);
                var valorJ2A = Convert.ToInt32(data.Rows[i]["5"] is DBNull ? 0 : data.Rows[i]["5"]);
                var valorJ2B = Convert.ToInt32(data.Rows[i]["6"] is DBNull ? 0 : data.Rows[i]["6"]);
                var valorJ3A = Convert.ToInt32(data.Rows[i]["9"] is DBNull ? 0 : data.Rows[i]["9"]);
                var valorJ3B = Convert.ToInt32(data.Rows[i]["10"] is DBNull ? 0 : data.Rows[i]["10"]);
                var valorJ4A = Convert.ToInt32(data.Rows[i]["13"] is DBNull ? 0 : data.Rows[i]["13"]);
                var valorJ4B = Convert.ToInt32(data.Rows[i]["14"] is DBNull ? 0 : data.Rows[i]["14"]);

                var total = valor1 + valor2;
                var parJ1 = total == 0 ? 0 : total - par;

                data.Rows[i]["3"] = total;
                data.Rows[i]["4"] = parJ1;

                var totalJ2 = valorJ2A + valorJ2B;
                var parJ2 = totalJ2 == 0 ? 0 : totalJ2 - par;
                data.Rows[i]["7"] = totalJ2;
                data.Rows[i]["8"] = parJ2;

                var totalJ3 = valorJ3A + valorJ3B;
                var parJ3 = totalJ3 == 0 ? 0 : totalJ3 - par;
                data.Rows[i]["11"] = totalJ3;
                data.Rows[i]["12"] = parJ3;

                var totalJ4 = valorJ4A + valorJ4B;
                var parJ4 = totalJ4 == 0 ? 0 : totalJ4 - par;
                data.Rows[i]["15"] = totalJ4;
                data.Rows[i]["16"] = parJ4;

                var totalPar = parJ1 + parJ2 + parJ3 + parJ4;
                data.Rows[i]["total"] = totalPar;
            }
            var aux_data = data.DefaultView;
            aux_data.Sort = "total";
            return aux_data.ToTable();
        }

        public static DataTable GetLista(int jornadaId, int categoriaId)
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps.Add(new SqlParameter("JornadaId", jornadaId));
            ps.Add(new SqlParameter("CategoriaId", categoriaId));
            DataTable dt = db.GetStoreProcedure("[golf].[pTablaClasificatorias]", ps);
            dt = CalcularScoresJor(dt);
            return dt;
        }
        private static DataTable CalcularScoresJor(DataTable dt)
        {
            int nroRow = 0;
            int sumatoria = 0;
            int totalGross = 0;
            int parjornadas = 0;
            string s = "";
            int Handicap = 0;


            foreach (DataRow dr in dt.Rows)
            {
                s = dr["Handicap"].ToString();
                string[] words = s.Split('-');
                Handicap = Convert.ToInt32(words[0]);

                sumatoria = sumatoria + Handicap;
            }

            if (sumatoria > 0)
            {
                parjornadas = GolfHoyoPar.GetParTotal();
                dt.Columns.Add("Score", typeof(Int32));
                foreach (DataRow dr in dt.Rows)
                {
                    if (string.IsNullOrEmpty(dr["Total"].ToString()))
                    {
                        nroRow++;
                    }
                    else
                    {
                        totalGross = Convert.ToInt32(dr["Total"].ToString());
                        dt.Rows[nroRow]["Score"] = totalGross - parjornadas;
                        nroRow++;

                    }

                }

            }
            else
            {

                parjornadas = GolfHoyoPar.GetParTotal();
                dt.Columns.Add("Score", typeof(Int32));
                foreach (DataRow dr in dt.Rows)
                {
                    if (string.IsNullOrEmpty(dr["Total"].ToString()))
                    {
                        nroRow++;
                    }
                    else
                    {

                        totalGross = Convert.ToInt32(dr["Total"].ToString());
                        dt.Rows[nroRow]["Score"] = totalGross - parjornadas;
                        nroRow++;

                    }

                }


                dt.Columns.Remove("Handicap");
                dt.Columns.Remove("TotalNeto");


            }





            return dt;
        }
        public static DataTable GetListaSHCP(int jornadaId, int categoriaId)
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps.Add(new SqlParameter("JornadaId", jornadaId));
            ps.Add(new SqlParameter("CategoriaId", categoriaId));
            return db.GetStoreProcedure("pgolfTablaClasificatoriasSHCP", ps);
        }

        public static DataTable GetNroJornadas(int eventoId)
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            ps.Add(new SqlParameter("EventoId", eventoId));
            var respuesta = db.GetStoreProcedure("[golf].[pGetNroJonadasByEvento]", ps);
            return respuesta;
        }
        #endregion

        #region Private Members

        private bool ExecuteTransaction(string psName)
        {
            DBTransaction db = new DBTransaction();
            List<SqlParameter> ps = new List<SqlParameter>();
            if (psName == "[golf].[pUpJornada]")
            {
                ps.Add(new SqlParameter("JornadaId", JornadaId));
            }
            ps.Add(new SqlParameter("Fecha", Fecha));
            ps.Add(new SqlParameter("EventoDeportivoId", EventoDeportivoId));
            ps.Add(new SqlParameter("Descripcion", Descripcion.ToUpper()));
            ps.Add(new SqlParameter("NombreCorto", NombreCorto.ToUpper()));
            ps.Add(new SqlParameter("UsuarioId", UsuarioId));
            db.ExecStoreProcedure(psName, ps);
            return (db.RowAffected > 0);
        }

        private static GolfJornada ConvertToJornada(DataRow dr)
        {
            GolfJornada gj = new GolfJornada();
            if (dr != null)
            {
                gj.JornadaId = Convert.ToInt32(dr["JornadaId"]);
                gj.Fecha = Convert.ToDateTime(dr["Fecha"]);
                gj.EventoDeportivoId = Convert.ToInt32(dr["EventoDeportivoId"]);
                gj.Descripcion = Convert.ToString(dr["Descripcion"]);
                gj.NombreCorto = Convert.ToString(dr["NombreCorto"]);
                gj.FechaRegistro = Convert.ToDateTime(dr["FechaRegistro"]);
                gj.UsuarioId = Convert.ToInt32(dr["UsuarioId"]);
            }
            return gj;
        }

        private static GolfJornada Parse(int jornadaId)
        {
            DBTransaction db = new DBTransaction();
            Dictionary<string, int> fields = new Dictionary<string, int>();
            fields.Add(nameof(JornadaId), jornadaId);
            DataRow dr = db.GetDataRow(Entity, fields);
            GolfJornada gjo = ConvertToJornada(dr);
            return gjo;
        }
        #endregion

    }
}
